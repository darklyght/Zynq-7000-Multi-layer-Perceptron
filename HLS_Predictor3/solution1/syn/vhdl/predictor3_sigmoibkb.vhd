-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity predictor3_sigmoibkb_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 13; 
             mem_size    : integer := 8192
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          addr2      : in std_logic_vector(awidth-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(dwidth-1 downto 0);
          addr3      : in std_logic_vector(awidth-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of predictor3_sigmoibkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr2_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr3_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem0 : mem_array := (
    0 to 2677=> "00000000", 2678 to 2855=> "00000001", 2856 to 2960=> "00000010", 2961 to 3035=> "00000011", 
    3036 to 3093=> "00000100", 3094 to 3141=> "00000101", 3142 to 3181=> "00000110", 3182 to 3216=> "00000111", 
    3217 to 3248=> "00001000", 3249 to 3276=> "00001001", 3277 to 3301=> "00001010", 3302 to 3324=> "00001011", 
    3325 to 3346=> "00001100", 3347 to 3366=> "00001101", 3367 to 3385=> "00001110", 3386 to 3402=> "00001111", 
    3403 to 3419=> "00010000", 3420 to 3435=> "00010001", 3436 to 3449=> "00010010", 3450 to 3464=> "00010011", 
    3465 to 3477=> "00010100", 3478 to 3490=> "00010101", 3491 to 3503=> "00010110", 3504 to 3515=> "00010111", 
    3516 to 3526=> "00011000", 3527 to 3537=> "00011001", 3538 to 3548=> "00011010", 3549 to 3559=> "00011011", 
    3560 to 3569=> "00011100", 3570 to 3579=> "00011101", 3580 to 3588=> "00011110", 3589 to 3597=> "00011111", 
    3598 to 3606=> "00100000", 3607 to 3615=> "00100001", 3616 to 3624=> "00100010", 3625 to 3632=> "00100011", 
    3633 to 3640=> "00100100", 3641 to 3648=> "00100101", 3649 to 3656=> "00100110", 3657 to 3664=> "00100111", 
    3665 to 3671=> "00101000", 3672 to 3679=> "00101001", 3680 to 3686=> "00101010", 3687 to 3693=> "00101011", 
    3694 to 3700=> "00101100", 3701 to 3707=> "00101101", 3708 to 3714=> "00101110", 3715 to 3720=> "00101111", 
    3721 to 3727=> "00110000", 3728 to 3733=> "00110001", 3734 to 3739=> "00110010", 3740 to 3746=> "00110011", 
    3747 to 3752=> "00110100", 3753 to 3758=> "00110101", 3759 to 3764=> "00110110", 3765 to 3770=> "00110111", 
    3771 to 3775=> "00111000", 3776 to 3781=> "00111001", 3782 to 3787=> "00111010", 3788 to 3792=> "00111011", 
    3793 to 3798=> "00111100", 3799 to 3803=> "00111101", 3804 to 3809=> "00111110", 3810 to 3814=> "00111111", 
    3815 to 3820=> "01000000", 3821 to 3825=> "01000001", 3826 to 3830=> "01000010", 3831 to 3835=> "01000011", 
    3836 to 3840=> "01000100", 3841 to 3845=> "01000101", 3846 to 3850=> "01000110", 3851 to 3855=> "01000111", 
    3856 to 3860=> "01001000", 3861 to 3865=> "01001001", 3866 to 3870=> "01001010", 3871 to 3875=> "01001011", 
    3876 to 3880=> "01001100", 3881 to 3884=> "01001101", 3885 to 3889=> "01001110", 3890 to 3894=> "01001111", 
    3895 to 3898=> "01010000", 3899 to 3903=> "01010001", 3904 to 3907=> "01010010", 3908 to 3912=> "01010011", 
    3913 to 3917=> "01010100", 3918 to 3921=> "01010101", 3922 to 3926=> "01010110", 3927 to 3930=> "01010111", 
    3931 to 3934=> "01011000", 3935 to 3939=> "01011001", 3940 to 3943=> "01011010", 3944 to 3948=> "01011011", 
    3949 to 3952=> "01011100", 3953 to 3956=> "01011101", 3957 to 3960=> "01011110", 3961 to 3965=> "01011111", 
    3966 to 3969=> "01100000", 3970 to 3973=> "01100001", 3974 to 3977=> "01100010", 3978 to 3982=> "01100011", 
    3983 to 3986=> "01100100", 3987 to 3990=> "01100101", 3991 to 3994=> "01100110", 3995 to 3998=> "01100111", 
    3999 to 4002=> "01101000", 4003 to 4007=> "01101001", 4008 to 4011=> "01101010", 4012 to 4015=> "01101011", 
    4016 to 4019=> "01101100", 4020 to 4023=> "01101101", 4024 to 4027=> "01101110", 4028 to 4031=> "01101111", 
    4032 to 4035=> "01110000", 4036 to 4039=> "01110001", 4040 to 4043=> "01110010", 4044 to 4047=> "01110011", 
    4048 to 4051=> "01110100", 4052 to 4055=> "01110101", 4056 to 4059=> "01110110", 4060 to 4063=> "01110111", 
    4064 to 4067=> "01111000", 4068 to 4071=> "01111001", 4072 to 4075=> "01111010", 4076 to 4079=> "01111011", 
    4080 to 4083=> "01111100", 4084 to 4087=> "01111101", 4088 to 4091=> "01111110", 4092 to 4095=> "01111111", 
    4096 to 4100=> "10000000", 4101 to 4104=> "10000001", 4105 to 4108=> "10000010", 4109 to 4112=> "10000011", 
    4113 to 4116=> "10000100", 4117 to 4120=> "10000101", 4121 to 4124=> "10000110", 4125 to 4128=> "10000111", 
    4129 to 4132=> "10001000", 4133 to 4136=> "10001001", 4137 to 4140=> "10001010", 4141 to 4144=> "10001011", 
    4145 to 4148=> "10001100", 4149 to 4152=> "10001101", 4153 to 4156=> "10001110", 4157 to 4160=> "10001111", 
    4161 to 4164=> "10010000", 4165 to 4168=> "10010001", 4169 to 4172=> "10010010", 4173 to 4176=> "10010011", 
    4177 to 4180=> "10010100", 4181 to 4184=> "10010101", 4185 to 4189=> "10010110", 4190 to 4193=> "10010111", 
    4194 to 4197=> "10011000", 4198 to 4201=> "10011001", 4202 to 4205=> "10011010", 4206 to 4209=> "10011011", 
    4210 to 4214=> "10011100", 4215 to 4218=> "10011101", 4219 to 4222=> "10011110", 4223 to 4226=> "10011111", 
    4227 to 4231=> "10100000", 4232 to 4235=> "10100001", 4236 to 4239=> "10100010", 4240 to 4243=> "10100011", 
    4244 to 4248=> "10100100", 4249 to 4252=> "10100101", 4253 to 4257=> "10100110", 4258 to 4261=> "10100111", 
    4262 to 4265=> "10101000", 4266 to 4270=> "10101001", 4271 to 4274=> "10101010", 4275 to 4279=> "10101011", 
    4280 to 4284=> "10101100", 4285 to 4288=> "10101101", 4289 to 4293=> "10101110", 4294 to 4297=> "10101111", 
    4298 to 4302=> "10110000", 4303 to 4307=> "10110001", 4308 to 4311=> "10110010", 4312 to 4316=> "10110011", 
    4317 to 4321=> "10110100", 4322 to 4326=> "10110101", 4327 to 4331=> "10110110", 4332 to 4336=> "10110111", 
    4337 to 4341=> "10111000", 4342 to 4346=> "10111001", 4347 to 4351=> "10111010", 4352 to 4356=> "10111011", 
    4357 to 4361=> "10111100", 4362 to 4366=> "10111101", 4367 to 4371=> "10111110", 4372 to 4377=> "10111111", 
    4378 to 4382=> "11000000", 4383 to 4388=> "11000001", 4389 to 4393=> "11000010", 4394 to 4399=> "11000011", 
    4400 to 4404=> "11000100", 4405 to 4410=> "11000101", 4411 to 4416=> "11000110", 4417 to 4421=> "11000111", 
    4422 to 4427=> "11001000", 4428 to 4433=> "11001001", 4434 to 4439=> "11001010", 4440 to 4445=> "11001011", 
    4446 to 4452=> "11001100", 4453 to 4458=> "11001101", 4459 to 4464=> "11001110", 4465 to 4471=> "11001111", 
    4472 to 4477=> "11010000", 4478 to 4484=> "11010001", 4485 to 4491=> "11010010", 4492 to 4498=> "11010011", 
    4499 to 4505=> "11010100", 4506 to 4512=> "11010101", 4513 to 4520=> "11010110", 4521 to 4527=> "11010111", 
    4528 to 4535=> "11011000", 4536 to 4543=> "11011001", 4544 to 4551=> "11011010", 4552 to 4559=> "11011011", 
    4560 to 4567=> "11011100", 4568 to 4576=> "11011101", 4577 to 4585=> "11011110", 4586 to 4594=> "11011111", 
    4595 to 4603=> "11100000", 4604 to 4612=> "11100001", 4613 to 4622=> "11100010", 4623 to 4632=> "11100011", 
    4633 to 4643=> "11100100", 4644 to 4654=> "11100101", 4655 to 4665=> "11100110", 4666 to 4676=> "11100111", 
    4677 to 4688=> "11101000", 4689 to 4701=> "11101001", 4702 to 4714=> "11101010", 4715 to 4727=> "11101011", 
    4728 to 4742=> "11101100", 4743 to 4756=> "11101101", 4757 to 4772=> "11101110", 4773 to 4789=> "11101111", 
    4790 to 4806=> "11110000", 4807 to 4825=> "11110001", 4826 to 4845=> "11110010", 4846 to 4867=> "11110011", 
    4868 to 4890=> "11110100", 4891 to 4915=> "11110101", 4916 to 4943=> "11110110", 4944 to 4975=> "11110111", 
    4976 to 5010=> "11111000", 5011 to 5050=> "11111001", 5051 to 5098=> "11111010", 5099 to 5156=> "11111011", 
    5157 to 5231=> "11111100", 5232 to 5336=> "11111101", 5337 to 5514=> "11111110", 5515 to 8127=> "11111111", 
    8128 to 8191=> "00000000" );
signal mem1 : mem_array := (
    0 to 2677=> "00000000", 2678 to 2855=> "00000001", 2856 to 2960=> "00000010", 2961 to 3035=> "00000011", 
    3036 to 3093=> "00000100", 3094 to 3141=> "00000101", 3142 to 3181=> "00000110", 3182 to 3216=> "00000111", 
    3217 to 3248=> "00001000", 3249 to 3276=> "00001001", 3277 to 3301=> "00001010", 3302 to 3324=> "00001011", 
    3325 to 3346=> "00001100", 3347 to 3366=> "00001101", 3367 to 3385=> "00001110", 3386 to 3402=> "00001111", 
    3403 to 3419=> "00010000", 3420 to 3435=> "00010001", 3436 to 3449=> "00010010", 3450 to 3464=> "00010011", 
    3465 to 3477=> "00010100", 3478 to 3490=> "00010101", 3491 to 3503=> "00010110", 3504 to 3515=> "00010111", 
    3516 to 3526=> "00011000", 3527 to 3537=> "00011001", 3538 to 3548=> "00011010", 3549 to 3559=> "00011011", 
    3560 to 3569=> "00011100", 3570 to 3579=> "00011101", 3580 to 3588=> "00011110", 3589 to 3597=> "00011111", 
    3598 to 3606=> "00100000", 3607 to 3615=> "00100001", 3616 to 3624=> "00100010", 3625 to 3632=> "00100011", 
    3633 to 3640=> "00100100", 3641 to 3648=> "00100101", 3649 to 3656=> "00100110", 3657 to 3664=> "00100111", 
    3665 to 3671=> "00101000", 3672 to 3679=> "00101001", 3680 to 3686=> "00101010", 3687 to 3693=> "00101011", 
    3694 to 3700=> "00101100", 3701 to 3707=> "00101101", 3708 to 3714=> "00101110", 3715 to 3720=> "00101111", 
    3721 to 3727=> "00110000", 3728 to 3733=> "00110001", 3734 to 3739=> "00110010", 3740 to 3746=> "00110011", 
    3747 to 3752=> "00110100", 3753 to 3758=> "00110101", 3759 to 3764=> "00110110", 3765 to 3770=> "00110111", 
    3771 to 3775=> "00111000", 3776 to 3781=> "00111001", 3782 to 3787=> "00111010", 3788 to 3792=> "00111011", 
    3793 to 3798=> "00111100", 3799 to 3803=> "00111101", 3804 to 3809=> "00111110", 3810 to 3814=> "00111111", 
    3815 to 3820=> "01000000", 3821 to 3825=> "01000001", 3826 to 3830=> "01000010", 3831 to 3835=> "01000011", 
    3836 to 3840=> "01000100", 3841 to 3845=> "01000101", 3846 to 3850=> "01000110", 3851 to 3855=> "01000111", 
    3856 to 3860=> "01001000", 3861 to 3865=> "01001001", 3866 to 3870=> "01001010", 3871 to 3875=> "01001011", 
    3876 to 3880=> "01001100", 3881 to 3884=> "01001101", 3885 to 3889=> "01001110", 3890 to 3894=> "01001111", 
    3895 to 3898=> "01010000", 3899 to 3903=> "01010001", 3904 to 3907=> "01010010", 3908 to 3912=> "01010011", 
    3913 to 3917=> "01010100", 3918 to 3921=> "01010101", 3922 to 3926=> "01010110", 3927 to 3930=> "01010111", 
    3931 to 3934=> "01011000", 3935 to 3939=> "01011001", 3940 to 3943=> "01011010", 3944 to 3948=> "01011011", 
    3949 to 3952=> "01011100", 3953 to 3956=> "01011101", 3957 to 3960=> "01011110", 3961 to 3965=> "01011111", 
    3966 to 3969=> "01100000", 3970 to 3973=> "01100001", 3974 to 3977=> "01100010", 3978 to 3982=> "01100011", 
    3983 to 3986=> "01100100", 3987 to 3990=> "01100101", 3991 to 3994=> "01100110", 3995 to 3998=> "01100111", 
    3999 to 4002=> "01101000", 4003 to 4007=> "01101001", 4008 to 4011=> "01101010", 4012 to 4015=> "01101011", 
    4016 to 4019=> "01101100", 4020 to 4023=> "01101101", 4024 to 4027=> "01101110", 4028 to 4031=> "01101111", 
    4032 to 4035=> "01110000", 4036 to 4039=> "01110001", 4040 to 4043=> "01110010", 4044 to 4047=> "01110011", 
    4048 to 4051=> "01110100", 4052 to 4055=> "01110101", 4056 to 4059=> "01110110", 4060 to 4063=> "01110111", 
    4064 to 4067=> "01111000", 4068 to 4071=> "01111001", 4072 to 4075=> "01111010", 4076 to 4079=> "01111011", 
    4080 to 4083=> "01111100", 4084 to 4087=> "01111101", 4088 to 4091=> "01111110", 4092 to 4095=> "01111111", 
    4096 to 4100=> "10000000", 4101 to 4104=> "10000001", 4105 to 4108=> "10000010", 4109 to 4112=> "10000011", 
    4113 to 4116=> "10000100", 4117 to 4120=> "10000101", 4121 to 4124=> "10000110", 4125 to 4128=> "10000111", 
    4129 to 4132=> "10001000", 4133 to 4136=> "10001001", 4137 to 4140=> "10001010", 4141 to 4144=> "10001011", 
    4145 to 4148=> "10001100", 4149 to 4152=> "10001101", 4153 to 4156=> "10001110", 4157 to 4160=> "10001111", 
    4161 to 4164=> "10010000", 4165 to 4168=> "10010001", 4169 to 4172=> "10010010", 4173 to 4176=> "10010011", 
    4177 to 4180=> "10010100", 4181 to 4184=> "10010101", 4185 to 4189=> "10010110", 4190 to 4193=> "10010111", 
    4194 to 4197=> "10011000", 4198 to 4201=> "10011001", 4202 to 4205=> "10011010", 4206 to 4209=> "10011011", 
    4210 to 4214=> "10011100", 4215 to 4218=> "10011101", 4219 to 4222=> "10011110", 4223 to 4226=> "10011111", 
    4227 to 4231=> "10100000", 4232 to 4235=> "10100001", 4236 to 4239=> "10100010", 4240 to 4243=> "10100011", 
    4244 to 4248=> "10100100", 4249 to 4252=> "10100101", 4253 to 4257=> "10100110", 4258 to 4261=> "10100111", 
    4262 to 4265=> "10101000", 4266 to 4270=> "10101001", 4271 to 4274=> "10101010", 4275 to 4279=> "10101011", 
    4280 to 4284=> "10101100", 4285 to 4288=> "10101101", 4289 to 4293=> "10101110", 4294 to 4297=> "10101111", 
    4298 to 4302=> "10110000", 4303 to 4307=> "10110001", 4308 to 4311=> "10110010", 4312 to 4316=> "10110011", 
    4317 to 4321=> "10110100", 4322 to 4326=> "10110101", 4327 to 4331=> "10110110", 4332 to 4336=> "10110111", 
    4337 to 4341=> "10111000", 4342 to 4346=> "10111001", 4347 to 4351=> "10111010", 4352 to 4356=> "10111011", 
    4357 to 4361=> "10111100", 4362 to 4366=> "10111101", 4367 to 4371=> "10111110", 4372 to 4377=> "10111111", 
    4378 to 4382=> "11000000", 4383 to 4388=> "11000001", 4389 to 4393=> "11000010", 4394 to 4399=> "11000011", 
    4400 to 4404=> "11000100", 4405 to 4410=> "11000101", 4411 to 4416=> "11000110", 4417 to 4421=> "11000111", 
    4422 to 4427=> "11001000", 4428 to 4433=> "11001001", 4434 to 4439=> "11001010", 4440 to 4445=> "11001011", 
    4446 to 4452=> "11001100", 4453 to 4458=> "11001101", 4459 to 4464=> "11001110", 4465 to 4471=> "11001111", 
    4472 to 4477=> "11010000", 4478 to 4484=> "11010001", 4485 to 4491=> "11010010", 4492 to 4498=> "11010011", 
    4499 to 4505=> "11010100", 4506 to 4512=> "11010101", 4513 to 4520=> "11010110", 4521 to 4527=> "11010111", 
    4528 to 4535=> "11011000", 4536 to 4543=> "11011001", 4544 to 4551=> "11011010", 4552 to 4559=> "11011011", 
    4560 to 4567=> "11011100", 4568 to 4576=> "11011101", 4577 to 4585=> "11011110", 4586 to 4594=> "11011111", 
    4595 to 4603=> "11100000", 4604 to 4612=> "11100001", 4613 to 4622=> "11100010", 4623 to 4632=> "11100011", 
    4633 to 4643=> "11100100", 4644 to 4654=> "11100101", 4655 to 4665=> "11100110", 4666 to 4676=> "11100111", 
    4677 to 4688=> "11101000", 4689 to 4701=> "11101001", 4702 to 4714=> "11101010", 4715 to 4727=> "11101011", 
    4728 to 4742=> "11101100", 4743 to 4756=> "11101101", 4757 to 4772=> "11101110", 4773 to 4789=> "11101111", 
    4790 to 4806=> "11110000", 4807 to 4825=> "11110001", 4826 to 4845=> "11110010", 4846 to 4867=> "11110011", 
    4868 to 4890=> "11110100", 4891 to 4915=> "11110101", 4916 to 4943=> "11110110", 4944 to 4975=> "11110111", 
    4976 to 5010=> "11111000", 5011 to 5050=> "11111001", 5051 to 5098=> "11111010", 5099 to 5156=> "11111011", 
    5157 to 5231=> "11111100", 5232 to 5336=> "11111101", 5337 to 5514=> "11111110", 5515 to 8127=> "11111111", 
    8128 to 8191=> "00000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity predictor3_sigmoibkb is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 8192;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of predictor3_sigmoibkb is
    component predictor3_sigmoibkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    predictor3_sigmoibkb_rom_U :  component predictor3_sigmoibkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3);

end architecture;


