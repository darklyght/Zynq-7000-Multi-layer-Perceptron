// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="predictor,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.400000,HLS_SYN_LAT=94210,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=319,HLS_SYN_LUT=475}" *)

module predictor (
        ap_clk,
        ap_rst_n,
        bram_Addr_A,
        bram_EN_A,
        bram_WEN_A,
        bram_Din_A,
        bram_Dout_A,
        bram_Clk_A,
        bram_Rst_A,
        s_axi_BUS_CTRL_AWVALID,
        s_axi_BUS_CTRL_AWREADY,
        s_axi_BUS_CTRL_AWADDR,
        s_axi_BUS_CTRL_WVALID,
        s_axi_BUS_CTRL_WREADY,
        s_axi_BUS_CTRL_WDATA,
        s_axi_BUS_CTRL_WSTRB,
        s_axi_BUS_CTRL_ARVALID,
        s_axi_BUS_CTRL_ARREADY,
        s_axi_BUS_CTRL_ARADDR,
        s_axi_BUS_CTRL_RVALID,
        s_axi_BUS_CTRL_RREADY,
        s_axi_BUS_CTRL_RDATA,
        s_axi_BUS_CTRL_RRESP,
        s_axi_BUS_CTRL_BVALID,
        s_axi_BUS_CTRL_BREADY,
        s_axi_BUS_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'b1;
parameter    ap_ST_fsm_state2 = 25'b10;
parameter    ap_ST_fsm_state3 = 25'b100;
parameter    ap_ST_fsm_state4 = 25'b1000;
parameter    ap_ST_fsm_state5 = 25'b10000;
parameter    ap_ST_fsm_state6 = 25'b100000;
parameter    ap_ST_fsm_state7 = 25'b1000000;
parameter    ap_ST_fsm_state8 = 25'b10000000;
parameter    ap_ST_fsm_state9 = 25'b100000000;
parameter    ap_ST_fsm_state10 = 25'b1000000000;
parameter    ap_ST_fsm_state11 = 25'b10000000000;
parameter    ap_ST_fsm_state12 = 25'b100000000000;
parameter    ap_ST_fsm_state13 = 25'b1000000000000;
parameter    ap_ST_fsm_state14 = 25'b10000000000000;
parameter    ap_ST_fsm_state15 = 25'b100000000000000;
parameter    ap_ST_fsm_state16 = 25'b1000000000000000;
parameter    ap_ST_fsm_state17 = 25'b10000000000000000;
parameter    ap_ST_fsm_state18 = 25'b100000000000000000;
parameter    ap_ST_fsm_state19 = 25'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 25'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 25'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 25'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 25'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 25'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 25'b1000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    C_S_AXI_BUS_CTRL_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_BUS_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv28_0 = 28'b0000000000000000000000000000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_100 = 32'b100000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv9_F = 9'b1111;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_F = 5'b1111;
parameter    ap_const_lv15_1000 = 15'b1000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv7_3 = 7'b11;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv7_40 = 7'b1000000;

parameter C_S_AXI_BUS_CTRL_WSTRB_WIDTH = (C_S_AXI_BUS_CTRL_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] bram_Addr_A;
output   bram_EN_A;
output  [3:0] bram_WEN_A;
output  [31:0] bram_Din_A;
input  [31:0] bram_Dout_A;
output   bram_Clk_A;
output   bram_Rst_A;
input   s_axi_BUS_CTRL_AWVALID;
output   s_axi_BUS_CTRL_AWREADY;
input  [C_S_AXI_BUS_CTRL_ADDR_WIDTH - 1 : 0] s_axi_BUS_CTRL_AWADDR;
input   s_axi_BUS_CTRL_WVALID;
output   s_axi_BUS_CTRL_WREADY;
input  [C_S_AXI_BUS_CTRL_DATA_WIDTH - 1 : 0] s_axi_BUS_CTRL_WDATA;
input  [C_S_AXI_BUS_CTRL_WSTRB_WIDTH - 1 : 0] s_axi_BUS_CTRL_WSTRB;
input   s_axi_BUS_CTRL_ARVALID;
output   s_axi_BUS_CTRL_ARREADY;
input  [C_S_AXI_BUS_CTRL_ADDR_WIDTH - 1 : 0] s_axi_BUS_CTRL_ARADDR;
output   s_axi_BUS_CTRL_RVALID;
input   s_axi_BUS_CTRL_RREADY;
output  [C_S_AXI_BUS_CTRL_DATA_WIDTH - 1 : 0] s_axi_BUS_CTRL_RDATA;
output  [1:0] s_axi_BUS_CTRL_RRESP;
output   s_axi_BUS_CTRL_BVALID;
input   s_axi_BUS_CTRL_BREADY;
output  [1:0] s_axi_BUS_CTRL_BRESP;
output   interrupt;

reg bram_EN_A;
reg[3:0] bram_WEN_A;
reg[31:0] bram_Din_A;
reg bram_Rst_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [12:0] sigmoid_lut_address0;
reg    sigmoid_lut_ce0;
wire   [7:0] sigmoid_lut_q0;
reg  signed [31:0] reg_286;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state17;
reg  signed [31:0] reg_290;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state18;
wire   [5:0] i_2_fu_316_p2;
reg   [5:0] i_2_reg_683;
wire   [0:0] ap_CS_fsm_state2;
wire   [8:0] tmp_fu_326_p3;
reg   [8:0] tmp_reg_688;
wire   [0:0] exitcond5_fu_310_p2;
wire   [10:0] tmp_cast_fu_334_p1;
reg   [10:0] tmp_cast_reg_693;
reg   [10:0] bram_addr_4_reg_698;
wire   [4:0] j_2_fu_363_p2;
reg   [4:0] j_2_reg_706;
wire   [0:0] ap_CS_fsm_state3;
wire   [9:0] tmp_4_cast_fu_381_p1;
reg   [9:0] tmp_4_cast_reg_711;
wire   [0:0] exitcond4_fu_357_p2;
wire   [4:0] k_2_fu_395_p2;
reg   [4:0] k_2_reg_719;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] exitcond3_fu_389_p2;
wire   [9:0] sum3_fu_419_p2;
reg   [9:0] sum3_reg_729;
wire   [0:0] tmp_7_fu_428_p2;
reg   [0:0] tmp_7_reg_734;
wire   [10:0] sum7_fu_453_p2;
reg   [10:0] sum7_reg_743;
wire   [27:0] sum_2_fu_466_p2;
wire   [0:0] ap_CS_fsm_state12;
wire   [5:0] i_3_fu_487_p2;
reg   [5:0] i_3_reg_761;
wire   [0:0] ap_CS_fsm_state14;
wire   [10:0] tmp_1_cast_fu_505_p1;
reg   [10:0] tmp_1_cast_reg_766;
wire   [0:0] exitcond2_fu_481_p2;
wire   [9:0] tmp_2_cast_cast_fu_517_p1;
reg   [9:0] tmp_2_cast_cast_reg_771;
reg   [10:0] bram_addr_6_reg_776;
wire   [2:0] j_3_fu_550_p2;
reg   [2:0] j_3_reg_784;
wire   [0:0] ap_CS_fsm_state15;
wire   [8:0] tmp_6_cast_cast_fu_568_p1;
reg   [8:0] tmp_6_cast_cast_reg_789;
wire   [0:0] exitcond1_fu_544_p2;
wire   [4:0] k_3_fu_578_p2;
reg   [4:0] k_3_reg_797;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] exitcond_fu_572_p2;
wire   [8:0] sum4_fu_610_p2;
reg   [8:0] sum4_reg_807;
wire   [0:0] tmp_s_fu_619_p2;
reg   [0:0] tmp_s_reg_812;
wire   [9:0] sum8_fu_644_p2;
reg   [9:0] sum8_reg_821;
wire   [27:0] sum_3_fu_661_p2;
wire   [0:0] ap_CS_fsm_state24;
reg   [5:0] i_reg_194;
reg   [4:0] j_reg_205;
wire   [0:0] ap_CS_fsm_state13;
reg   [4:0] k_reg_217;
reg   [27:0] sum_reg_228;
reg   [5:0] i_1_reg_240;
reg   [2:0] j_1_reg_251;
wire   [0:0] ap_CS_fsm_state25;
reg   [4:0] k_1_reg_263;
reg   [27:0] sum_1_reg_274;
wire   [31:0] sum5_cast_fu_352_p1;
wire   [31:0] sum1_cast_fu_406_p1;
wire   [31:0] tmp_11_cast_fu_440_p1;
wire   [31:0] sum3_cast_fu_458_p1;
wire   [31:0] sum7_cast_fu_477_p1;
wire   [31:0] sum6_cast_fu_539_p1;
wire   [31:0] sum9_cast_fu_597_p1;
wire   [31:0] tmp_19_cast_fu_631_p1;
wire   [31:0] sum4_cast_fu_652_p1;
wire   [31:0] sum8_cast_fu_675_p1;
reg   [31:0] bram_Addr_A_orig;
wire   [31:0] sigmoid_lut_load_cas_fu_472_p1;
wire   [31:0] sigmoid_lut_load_1_c_fu_667_p1;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state19;
wire   [31:0] grp_fu_294_p2;
wire   [4:0] tmp_8_fu_322_p1;
wire   [8:0] tmp_11_fu_338_p2;
wire   [10:0] sum2_fu_344_p3;
wire   [3:0] tmp_16_fu_369_p1;
wire   [7:0] tmp_4_fu_373_p3;
wire   [8:0] k_cast1_fu_385_p1;
wire   [8:0] sum1_fu_401_p2;
wire   [9:0] tmp1_fu_411_p3;
wire   [14:0] tmp_18_fu_424_p1;
wire   [14:0] tmp_9_fu_434_p2;
wire   [10:0] tmp2_fu_445_p3;
wire   [23:0] grp_fu_300_p4;
wire  signed [27:0] tmp_5_cast_fu_462_p1;
wire   [4:0] tmp_14_fu_493_p1;
wire   [8:0] tmp_1_fu_497_p3;
wire   [6:0] tmp_2_fu_509_p3;
wire   [6:0] tmp_15_fu_521_p2;
wire   [9:0] sum5_fu_527_p3;
wire  signed [10:0] sum6_cast1_fu_535_p1;
wire   [1:0] tmp_17_fu_556_p1;
wire   [5:0] tmp_6_fu_560_p3;
wire   [10:0] tmp3_fu_584_p3;
wire   [10:0] sum9_fu_592_p2;
wire   [8:0] tmp4_fu_602_p3;
wire   [14:0] tmp_19_fu_615_p1;
wire   [14:0] tmp_13_fu_625_p2;
wire   [9:0] tmp5_fu_636_p3;
wire  signed [9:0] sum4_cast1_fu_649_p1;
wire  signed [27:0] tmp_18_cast_fu_657_p1;
wire  signed [10:0] sum8_cast1_fu_672_p1;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'b1;
end

predictor_sigmoidbkb #(
    .DataWidth( 8 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
sigmoid_lut_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sigmoid_lut_address0),
    .ce0(sigmoid_lut_ce0),
    .q0(sigmoid_lut_q0)
);

predictor_BUS_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_BUS_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_BUS_CTRL_DATA_WIDTH ))
predictor_BUS_CTRL_s_axi_U(
    .AWVALID(s_axi_BUS_CTRL_AWVALID),
    .AWREADY(s_axi_BUS_CTRL_AWREADY),
    .AWADDR(s_axi_BUS_CTRL_AWADDR),
    .WVALID(s_axi_BUS_CTRL_WVALID),
    .WREADY(s_axi_BUS_CTRL_WREADY),
    .WDATA(s_axi_BUS_CTRL_WDATA),
    .WSTRB(s_axi_BUS_CTRL_WSTRB),
    .ARVALID(s_axi_BUS_CTRL_ARVALID),
    .ARREADY(s_axi_BUS_CTRL_ARREADY),
    .ARADDR(s_axi_BUS_CTRL_ARADDR),
    .RVALID(s_axi_BUS_CTRL_RVALID),
    .RREADY(s_axi_BUS_CTRL_RREADY),
    .RDATA(s_axi_BUS_CTRL_RDATA),
    .RRESP(s_axi_BUS_CTRL_RRESP),
    .BVALID(s_axi_BUS_CTRL_BVALID),
    .BREADY(s_axi_BUS_CTRL_BREADY),
    .BRESP(s_axi_BUS_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

predictor_mul_32scud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
predictor_mul_32scud_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_286),
    .din1(reg_290),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond5_fu_310_p2 == 1'b0))) begin
        i_1_reg_240 <= ap_const_lv6_0;
    end else if (((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == exitcond1_fu_544_p2))) begin
        i_1_reg_240 <= i_3_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == exitcond4_fu_357_p2))) begin
        i_reg_194 <= i_2_reg_683;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_194 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == exitcond2_fu_481_p2))) begin
        j_1_reg_251 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        j_1_reg_251 <= j_3_reg_784;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_310_p2 == 1'b0))) begin
        j_reg_205 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_205 <= j_2_reg_706;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == exitcond1_fu_544_p2))) begin
        k_1_reg_263 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        k_1_reg_263 <= k_3_reg_797;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond4_fu_357_p2))) begin
        k_reg_217 <= ap_const_lv5_0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_reg_217 <= k_2_reg_719;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == exitcond1_fu_544_p2))) begin
        sum_1_reg_274 <= ap_const_lv28_0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        sum_1_reg_274 <= sum_3_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond4_fu_357_p2))) begin
        sum_reg_228 <= ap_const_lv28_0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_reg_228 <= sum_2_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_310_p2 == 1'b0))) begin
        bram_addr_4_reg_698[8 : 4] <= sum5_cast_fu_352_p1[8 : 4];
        tmp_cast_reg_693[8 : 4] <= tmp_cast_fu_334_p1[8 : 4];
        tmp_reg_688[8 : 4] <= tmp_fu_326_p3[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'b0 == exitcond2_fu_481_p2))) begin
        bram_addr_6_reg_776[6 : 2] <= sum6_cast_fu_539_p1[6 : 2];
        tmp_1_cast_reg_766[8 : 4] <= tmp_1_cast_fu_505_p1[8 : 4];
        tmp_2_cast_cast_reg_771[6 : 2] <= tmp_2_cast_cast_fu_517_p1[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_683 <= i_2_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_3_reg_761 <= i_3_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_2_reg_706 <= j_2_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_3_reg_784 <= j_3_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_2_reg_719 <= k_2_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k_3_reg_797 <= k_3_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_286 <= bram_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_290 <= bram_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond3_fu_389_p2))) begin
        sum3_reg_729 <= sum3_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == exitcond_fu_572_p2))) begin
        sum4_reg_807 <= sum4_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond3_fu_389_p2) & (1'b0 == tmp_7_fu_428_p2))) begin
        sum7_reg_743 <= sum7_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == exitcond_fu_572_p2) & (1'b0 == tmp_s_fu_619_p2))) begin
        sum8_reg_821 <= sum8_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == exitcond4_fu_357_p2))) begin
        tmp_4_cast_reg_711[7 : 4] <= tmp_4_cast_fu_381_p1[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b0 == exitcond1_fu_544_p2))) begin
        tmp_6_cast_cast_reg_789[5 : 4] <= tmp_6_cast_cast_fu_568_p1[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond3_fu_389_p2))) begin
        tmp_7_reg_734 <= tmp_7_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == exitcond_fu_572_p2))) begin
        tmp_s_reg_812 <= tmp_s_fu_619_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == exitcond2_fu_481_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == exitcond2_fu_481_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        bram_Addr_A_orig = sum8_cast_fu_675_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        bram_Addr_A_orig = sum4_cast_fu_652_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == exitcond_fu_572_p2) & ~(1'b0 == tmp_s_fu_619_p2))) begin
        bram_Addr_A_orig = bram_addr_6_reg_776;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == exitcond_fu_572_p2))) begin
        bram_Addr_A_orig = sum9_cast_fu_597_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        bram_Addr_A_orig = sum7_cast_fu_477_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bram_Addr_A_orig = sum3_cast_fu_458_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond3_fu_389_p2) & ~(1'b0 == tmp_7_fu_428_p2))) begin
        bram_Addr_A_orig = bram_addr_4_reg_698;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond3_fu_389_p2))) begin
        bram_Addr_A_orig = sum1_cast_fu_406_p1;
    end else begin
        bram_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        bram_Din_A = sigmoid_lut_load_1_c_fu_667_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == exitcond_fu_572_p2) & ~(1'b0 == tmp_s_fu_619_p2))) begin
        bram_Din_A = ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        bram_Din_A = sigmoid_lut_load_cas_fu_472_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond3_fu_389_p2) & ~(1'b0 == tmp_7_fu_428_p2))) begin
        bram_Din_A = ap_const_lv32_100;
    end else begin
        bram_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == exitcond3_fu_389_p2)) | ((1'b1 == ap_CS_fsm_state16) & (1'b0 == exitcond_fu_572_p2)) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond3_fu_389_p2) & ~(1'b0 == tmp_7_fu_428_p2)) | ((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == exitcond_fu_572_p2) & ~(1'b0 == tmp_s_fu_619_p2)))) begin
        bram_EN_A = 1'b1;
    end else begin
        bram_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (1'b0 == tmp_7_reg_734)) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == tmp_s_reg_812)) | ((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == exitcond3_fu_389_p2) & ~(1'b0 == tmp_7_fu_428_p2)) | ((1'b1 == ap_CS_fsm_state16) & ~(1'b0 == exitcond_fu_572_p2) & ~(1'b0 == tmp_s_fu_619_p2)))) begin
        bram_WEN_A = ap_const_lv4_F;
    end else begin
        bram_WEN_A = ap_const_lv4_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sigmoid_lut_address0 = tmp_19_cast_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sigmoid_lut_address0 = tmp_11_cast_fu_440_p1;
    end else begin
        sigmoid_lut_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state16))) begin
        sigmoid_lut_ce0 = 1'b1;
    end else begin
        sigmoid_lut_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond5_fu_310_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == exitcond4_fu_357_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == exitcond3_fu_389_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state14 : begin
            if (~(1'b0 == exitcond2_fu_481_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (~(1'b0 == exitcond1_fu_544_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (~(1'b0 == exitcond_fu_572_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bram_Addr_A = bram_Addr_A_orig << ap_const_lv32_2;

assign bram_Clk_A = ap_clk;

always @ (*) begin
    bram_Rst_A = ~ap_rst_n;
end

assign exitcond1_fu_544_p2 = ((j_1_reg_251 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond2_fu_481_p2 = ((i_1_reg_240 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond3_fu_389_p2 = ((k_reg_217 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond4_fu_357_p2 = ((j_reg_205 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond5_fu_310_p2 = ((i_reg_194 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign exitcond_fu_572_p2 = ((k_1_reg_263 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_fu_300_p4 = {{grp_fu_294_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign i_2_fu_316_p2 = (i_reg_194 + ap_const_lv6_1);

assign i_3_fu_487_p2 = (i_1_reg_240 + ap_const_lv6_1);

assign j_2_fu_363_p2 = (j_reg_205 + ap_const_lv5_1);

assign j_3_fu_550_p2 = (j_1_reg_251 + ap_const_lv3_1);

assign k_2_fu_395_p2 = (k_reg_217 + ap_const_lv5_1);

assign k_3_fu_578_p2 = (k_1_reg_263 + ap_const_lv5_1);

assign k_cast1_fu_385_p1 = k_reg_217;

assign sigmoid_lut_load_1_c_fu_667_p1 = sigmoid_lut_q0;

assign sigmoid_lut_load_cas_fu_472_p1 = sigmoid_lut_q0;

assign sum1_cast_fu_406_p1 = sum1_fu_401_p2;

assign sum1_fu_401_p2 = (tmp_reg_688 + k_cast1_fu_385_p1);

assign sum2_fu_344_p3 = {{ap_const_lv2_2}, {tmp_11_fu_338_p2}};

assign sum3_cast_fu_458_p1 = sum3_reg_729;

assign sum3_fu_419_p2 = (tmp1_fu_411_p3 + tmp_4_cast_reg_711);

assign sum4_cast1_fu_649_p1 = $signed(sum4_reg_807);

assign sum4_cast_fu_652_p1 = $unsigned(sum4_cast1_fu_649_p1);

assign sum4_fu_610_p2 = (tmp4_fu_602_p3 + tmp_6_cast_cast_reg_789);

assign sum5_cast_fu_352_p1 = sum2_fu_344_p3;

assign sum5_fu_527_p3 = {{ap_const_lv3_4}, {tmp_15_fu_521_p2}};

assign sum6_cast1_fu_535_p1 = $signed(sum5_fu_527_p3);

assign sum6_cast_fu_539_p1 = $unsigned(sum6_cast1_fu_535_p1);

assign sum7_cast_fu_477_p1 = sum7_reg_743;

assign sum7_fu_453_p2 = (tmp2_fu_445_p3 + tmp_cast_reg_693);

assign sum8_cast1_fu_672_p1 = $signed(sum8_reg_821);

assign sum8_cast_fu_675_p1 = $unsigned(sum8_cast1_fu_672_p1);

assign sum8_fu_644_p2 = (tmp5_fu_636_p3 + tmp_2_cast_cast_reg_771);

assign sum9_cast_fu_597_p1 = sum9_fu_592_p2;

assign sum9_fu_592_p2 = (tmp3_fu_584_p3 + tmp_1_cast_reg_766);

assign sum_2_fu_466_p2 = ($signed(tmp_5_cast_fu_462_p1) + $signed(sum_reg_228));

assign sum_3_fu_661_p2 = ($signed(tmp_18_cast_fu_657_p1) + $signed(sum_1_reg_274));

assign tmp1_fu_411_p3 = {{ap_const_lv5_10}, {k_reg_217}};

assign tmp2_fu_445_p3 = {{ap_const_lv6_20}, {j_reg_205}};

assign tmp3_fu_584_p3 = {{ap_const_lv6_20}, {k_1_reg_263}};

assign tmp4_fu_602_p3 = {{ap_const_lv4_8}, {k_1_reg_263}};

assign tmp5_fu_636_p3 = {{ap_const_lv7_40}, {j_1_reg_251}};

assign tmp_11_cast_fu_440_p1 = tmp_9_fu_434_p2;

assign tmp_11_fu_338_p2 = (tmp_fu_326_p3 | ap_const_lv9_F);

assign tmp_13_fu_625_p2 = (tmp_19_fu_615_p1 + ap_const_lv15_1000);

assign tmp_14_fu_493_p1 = i_1_reg_240[4:0];

assign tmp_15_fu_521_p2 = (tmp_2_fu_509_p3 | ap_const_lv7_3);

assign tmp_16_fu_369_p1 = j_reg_205[3:0];

assign tmp_17_fu_556_p1 = j_1_reg_251[1:0];

assign tmp_18_cast_fu_657_p1 = $signed(grp_fu_300_p4);

assign tmp_18_fu_424_p1 = sum_reg_228[14:0];

assign tmp_19_cast_fu_631_p1 = tmp_13_fu_625_p2;

assign tmp_19_fu_615_p1 = sum_1_reg_274[14:0];

assign tmp_1_cast_fu_505_p1 = tmp_1_fu_497_p3;

assign tmp_1_fu_497_p3 = {{tmp_14_fu_493_p1}, {ap_const_lv4_0}};

assign tmp_2_cast_cast_fu_517_p1 = tmp_2_fu_509_p3;

assign tmp_2_fu_509_p3 = {{tmp_14_fu_493_p1}, {ap_const_lv2_0}};

assign tmp_4_cast_fu_381_p1 = tmp_4_fu_373_p3;

assign tmp_4_fu_373_p3 = {{tmp_16_fu_369_p1}, {ap_const_lv4_0}};

assign tmp_5_cast_fu_462_p1 = $signed(grp_fu_300_p4);

assign tmp_6_cast_cast_fu_568_p1 = tmp_6_fu_560_p3;

assign tmp_6_fu_560_p3 = {{tmp_17_fu_556_p1}, {ap_const_lv4_0}};

assign tmp_7_fu_428_p2 = ((j_reg_205 == ap_const_lv5_F) ? 1'b1 : 1'b0);

assign tmp_8_fu_322_p1 = i_reg_194[4:0];

assign tmp_9_fu_434_p2 = (tmp_18_fu_424_p1 + ap_const_lv15_1000);

assign tmp_cast_fu_334_p1 = tmp_fu_326_p3;

assign tmp_fu_326_p3 = {{tmp_8_fu_322_p1}, {ap_const_lv4_0}};

assign tmp_s_fu_619_p2 = ((j_1_reg_251 == ap_const_lv3_3) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_688[3:0] <= 4'b0000;
    tmp_cast_reg_693[3:0] <= 4'b0000;
    tmp_cast_reg_693[10:9] <= 2'b00;
    bram_addr_4_reg_698[3:0] <= 4'b1111;
    bram_addr_4_reg_698[10:9] <= 2'b10;
    tmp_4_cast_reg_711[3:0] <= 4'b0000;
    tmp_4_cast_reg_711[9:8] <= 2'b00;
    tmp_1_cast_reg_766[3:0] <= 4'b0000;
    tmp_1_cast_reg_766[10:9] <= 2'b00;
    tmp_2_cast_cast_reg_771[1:0] <= 2'b00;
    tmp_2_cast_cast_reg_771[9:7] <= 3'b000;
    bram_addr_6_reg_776[1:0] <= 2'b11;
    bram_addr_6_reg_776[10:7] <= 4'b1100;
    tmp_6_cast_cast_reg_789[3:0] <= 4'b0000;
    tmp_6_cast_cast_reg_789[8:6] <= 3'b000;
end

endmodule //predictor
