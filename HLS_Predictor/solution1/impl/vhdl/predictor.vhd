-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity predictor is
generic (
    C_S_AXI_BUS_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_BUS_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    bram_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bram_EN_A : OUT STD_LOGIC;
    bram_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bram_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bram_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bram_Clk_A : OUT STD_LOGIC;
    bram_Rst_A : OUT STD_LOGIC;
    s_axi_BUS_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_BUS_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_WVALID : IN STD_LOGIC;
    s_axi_BUS_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_BUS_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_BUS_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_BUS_CTRL_RREADY : IN STD_LOGIC;
    s_axi_BUS_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_BUS_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_BUS_CTRL_BREADY : IN STD_LOGIC;
    s_axi_BUS_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of predictor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "predictor,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.400000,HLS_SYN_LAT=94210,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=319,HLS_SYN_LUT=475}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv15_1000 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal sigmoid_lut_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal sigmoid_lut_ce0 : STD_LOGIC;
    signal sigmoid_lut_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_2_fu_316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_683 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_326_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_688 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond5_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_reg_693 : STD_LOGIC_VECTOR (10 downto 0);
    signal bram_addr_4_reg_698 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_fu_363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_706 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_cast_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_cast_reg_711 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_reg_719 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum3_fu_419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum3_reg_729 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum7_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum7_reg_743 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum_2_fu_466_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_3_fu_487_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_761 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_1_cast_fu_505_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_cast_reg_766 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_cast_cast_fu_517_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_cast_cast_reg_771 : STD_LOGIC_VECTOR (9 downto 0);
    signal bram_addr_6_reg_776 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_3_fu_550_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_784 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_6_cast_cast_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_cast_cast_reg_789 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_578_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_3_reg_797 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal exitcond_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum4_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum4_reg_807 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_812 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum8_fu_644_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum8_reg_821 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_3_fu_661_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_reg_194 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_205 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal k_reg_217 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_reg_228 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_1_reg_240 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_251 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal k_1_reg_263 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_reg_274 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum5_cast_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_cast_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_cast_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum7_cast_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum6_cast_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum9_cast_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_cast_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_cast_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bram_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal sigmoid_lut_load_cas_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sigmoid_lut_load_1_c_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_322_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_338_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum2_fu_344_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_369_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_373_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_cast1_fu_385_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum1_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_411_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_424_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_434_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_445_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_300_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_cast_fu_462_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_14_fu_493_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_497_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_509_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_fu_521_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum5_fu_527_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum6_cast1_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_556_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_560_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_584_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum9_fu_592_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_fu_602_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_615_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_13_fu_625_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp5_fu_636_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum4_cast1_fu_649_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_cast_fu_657_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sum8_cast1_fu_672_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component predictor_mul_32scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component predictor_sigmoidbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component predictor_BUS_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    sigmoid_lut_U : component predictor_sigmoidbkb
    generic map (
        DataWidth => 8,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => sigmoid_lut_address0,
        ce0 => sigmoid_lut_ce0,
        q0 => sigmoid_lut_q0);

    predictor_BUS_CTRL_s_axi_U : component predictor_BUS_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_CTRL_AWVALID,
        AWREADY => s_axi_BUS_CTRL_AWREADY,
        AWADDR => s_axi_BUS_CTRL_AWADDR,
        WVALID => s_axi_BUS_CTRL_WVALID,
        WREADY => s_axi_BUS_CTRL_WREADY,
        WDATA => s_axi_BUS_CTRL_WDATA,
        WSTRB => s_axi_BUS_CTRL_WSTRB,
        ARVALID => s_axi_BUS_CTRL_ARVALID,
        ARREADY => s_axi_BUS_CTRL_ARREADY,
        ARADDR => s_axi_BUS_CTRL_ARADDR,
        RVALID => s_axi_BUS_CTRL_RVALID,
        RREADY => s_axi_BUS_CTRL_RREADY,
        RDATA => s_axi_BUS_CTRL_RDATA,
        RRESP => s_axi_BUS_CTRL_RRESP,
        BVALID => s_axi_BUS_CTRL_BVALID,
        BREADY => s_axi_BUS_CTRL_BREADY,
        BRESP => s_axi_BUS_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    predictor_mul_32scud_U0 : component predictor_mul_32scud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_286,
        din1 => reg_290,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond5_fu_310_p2 = ap_const_lv1_0)))) then 
                i_1_reg_240 <= ap_const_lv6_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state15) and not((ap_const_lv1_0 = exitcond1_fu_544_p2)))) then 
                i_1_reg_240 <= i_3_reg_761;
            end if; 
        end if;
    end process;

    i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_lv1_0 = exitcond4_fu_357_p2)))) then 
                i_reg_194 <= i_2_reg_683;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_194 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond2_fu_481_p2))) then 
                j_1_reg_251 <= ap_const_lv3_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
                j_1_reg_251 <= j_3_reg_784;
            end if; 
        end if;
    end process;

    j_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond5_fu_310_p2 = ap_const_lv1_0))) then 
                j_reg_205 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                j_reg_205 <= j_2_reg_706;
            end if; 
        end if;
    end process;

    k_1_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond1_fu_544_p2))) then 
                k_1_reg_263 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
                k_1_reg_263 <= k_3_reg_797;
            end if; 
        end if;
    end process;

    k_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_357_p2))) then 
                k_reg_217 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                k_reg_217 <= k_2_reg_719;
            end if; 
        end if;
    end process;

    sum_1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond1_fu_544_p2))) then 
                sum_1_reg_274 <= ap_const_lv28_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state24))) then 
                sum_1_reg_274 <= sum_3_fu_661_p2;
            end if; 
        end if;
    end process;

    sum_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_357_p2))) then 
                sum_reg_228 <= ap_const_lv28_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
                sum_reg_228 <= sum_2_fu_466_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond5_fu_310_p2 = ap_const_lv1_0))) then
                    bram_addr_4_reg_698(8 downto 4) <= sum5_cast_fu_352_p1(11 - 1 downto 0)(8 downto 4);
                    tmp_cast_reg_693(8 downto 4) <= tmp_cast_fu_334_p1(8 downto 4);
                    tmp_reg_688(8 downto 4) <= tmp_fu_326_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = exitcond2_fu_481_p2))) then
                    bram_addr_6_reg_776(6 downto 2) <= sum6_cast_fu_539_p1(11 - 1 downto 0)(6 downto 2);
                    tmp_1_cast_reg_766(8 downto 4) <= tmp_1_cast_fu_505_p1(8 downto 4);
                    tmp_2_cast_cast_reg_771(6 downto 2) <= tmp_2_cast_cast_fu_517_p1(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                i_2_reg_683 <= i_2_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state14))) then
                i_3_reg_761 <= i_3_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                j_2_reg_706 <= j_2_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                j_3_reg_784 <= j_3_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                k_2_reg_719 <= k_2_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                k_3_reg_797 <= k_3_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)))) then
                reg_286 <= bram_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = ap_CS_fsm_state18)))) then
                reg_290 <= bram_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_389_p2))) then
                sum3_reg_729 <= sum3_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond_fu_572_p2))) then
                sum4_reg_807 <= sum4_fu_610_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_389_p2)) and (ap_const_lv1_0 = tmp_7_fu_428_p2))) then
                sum7_reg_743 <= sum7_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = exitcond_fu_572_p2)) and (ap_const_lv1_0 = tmp_s_fu_619_p2))) then
                sum8_reg_821 <= sum8_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond4_fu_357_p2))) then
                    tmp_4_cast_reg_711(7 downto 4) <= tmp_4_cast_fu_381_p1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond1_fu_544_p2))) then
                    tmp_6_cast_cast_reg_789(5 downto 4) <= tmp_6_cast_cast_fu_568_p1(5 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_389_p2)))) then
                tmp_7_reg_734 <= tmp_7_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = exitcond_fu_572_p2)))) then
                tmp_s_reg_812 <= tmp_s_fu_619_p2;
            end if;
        end if;
    end process;
    tmp_reg_688(3 downto 0) <= "0000";
    tmp_cast_reg_693(3 downto 0) <= "0000";
    tmp_cast_reg_693(10 downto 9) <= "00";
    bram_addr_4_reg_698(3 downto 0) <= "1111";
    bram_addr_4_reg_698(10 downto 9) <= "10";
    tmp_4_cast_reg_711(3 downto 0) <= "0000";
    tmp_4_cast_reg_711(9 downto 8) <= "00";
    tmp_1_cast_reg_766(3 downto 0) <= "0000";
    tmp_1_cast_reg_766(10 downto 9) <= "00";
    tmp_2_cast_cast_reg_771(1 downto 0) <= "00";
    tmp_2_cast_cast_reg_771(9 downto 7) <= "000";
    bram_addr_6_reg_776(1 downto 0) <= "11";
    bram_addr_6_reg_776(10 downto 7) <= "1100";
    tmp_6_cast_cast_reg_789(3 downto 0) <= "0000";
    tmp_6_cast_cast_reg_789(8 downto 6) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond5_fu_310_p2, exitcond4_fu_357_p2, exitcond3_fu_389_p2, exitcond2_fu_481_p2, exitcond1_fu_544_p2, exitcond_fu_572_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond5_fu_310_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_357_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_389_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state14 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_481_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_544_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (not((ap_const_lv1_0 = exitcond_fu_572_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12 downto 12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13 downto 13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23 downto 23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5 downto 5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6 downto 6);

    ap_done_assign_proc : process(ap_CS_fsm_state14, exitcond2_fu_481_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14) and not((ap_const_lv1_0 = exitcond2_fu_481_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, exitcond2_fu_481_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state14) and not((ap_const_lv1_0 = exitcond2_fu_481_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bram_Addr_A <= std_logic_vector(shift_left(unsigned(bram_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    bram_Addr_A_orig_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state17, bram_addr_4_reg_698, ap_CS_fsm_state4, exitcond3_fu_389_p2, tmp_7_fu_428_p2, bram_addr_6_reg_776, ap_CS_fsm_state16, exitcond_fu_572_p2, tmp_s_fu_619_p2, ap_CS_fsm_state13, ap_CS_fsm_state25, sum1_cast_fu_406_p1, sum3_cast_fu_458_p1, sum7_cast_fu_477_p1, sum9_cast_fu_597_p1, sum4_cast_fu_652_p1, sum8_cast_fu_675_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            bram_Addr_A_orig <= sum8_cast_fu_675_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            bram_Addr_A_orig <= sum4_cast_fu_652_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = exitcond_fu_572_p2)) and not((ap_const_lv1_0 = tmp_s_fu_619_p2)))) then 
            bram_Addr_A_orig <= std_logic_vector(resize(unsigned(bram_addr_6_reg_776),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond_fu_572_p2))) then 
            bram_Addr_A_orig <= sum9_cast_fu_597_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            bram_Addr_A_orig <= sum7_cast_fu_477_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            bram_Addr_A_orig <= sum3_cast_fu_458_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_389_p2)) and not((ap_const_lv1_0 = tmp_7_fu_428_p2)))) then 
            bram_Addr_A_orig <= std_logic_vector(resize(unsigned(bram_addr_4_reg_698),32));
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_389_p2))) then 
            bram_Addr_A_orig <= sum1_cast_fu_406_p1;
        else 
            bram_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    bram_Clk_A <= ap_clk;

    bram_Din_A_assign_proc : process(ap_CS_fsm_state4, exitcond3_fu_389_p2, tmp_7_fu_428_p2, ap_CS_fsm_state16, exitcond_fu_572_p2, tmp_s_fu_619_p2, ap_CS_fsm_state13, ap_CS_fsm_state25, sigmoid_lut_load_cas_fu_472_p1, sigmoid_lut_load_1_c_fu_667_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state25))) then 
            bram_Din_A <= sigmoid_lut_load_1_c_fu_667_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = exitcond_fu_572_p2)) and not((ap_const_lv1_0 = tmp_s_fu_619_p2)))) then 
            bram_Din_A <= ap_const_lv32_0;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            bram_Din_A <= sigmoid_lut_load_cas_fu_472_p1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_389_p2)) and not((ap_const_lv1_0 = tmp_7_fu_428_p2)))) then 
            bram_Din_A <= ap_const_lv32_100;
        else 
            bram_Din_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bram_EN_A_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state17, ap_CS_fsm_state4, exitcond3_fu_389_p2, tmp_7_fu_428_p2, ap_CS_fsm_state16, exitcond_fu_572_p2, tmp_s_fu_619_p2, ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state5)) or ((ap_const_lv1_1 = ap_CS_fsm_state17)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond3_fu_389_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond_fu_572_p2)) or ((ap_const_lv1_1 = ap_CS_fsm_state13)) or ((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_389_p2)) and not((ap_const_lv1_0 = tmp_7_fu_428_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = exitcond_fu_572_p2)) and not((ap_const_lv1_0 = tmp_s_fu_619_p2))))) then 
            bram_EN_A <= ap_const_logic_1;
        else 
            bram_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    bram_Rst_A_assign_proc : process(ap_rst_n)
    begin
                bram_Rst_A <= not(ap_rst_n);
    end process;


    bram_WEN_A_assign_proc : process(ap_CS_fsm_state4, exitcond3_fu_389_p2, tmp_7_fu_428_p2, tmp_7_reg_734, ap_CS_fsm_state16, exitcond_fu_572_p2, tmp_s_fu_619_p2, tmp_s_reg_812, ap_CS_fsm_state13, ap_CS_fsm_state25)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_7_reg_734)) or ((ap_const_lv1_1 = ap_CS_fsm_state25) and (ap_const_lv1_0 = tmp_s_reg_812)) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not((ap_const_lv1_0 = exitcond3_fu_389_p2)) and not((ap_const_lv1_0 = tmp_7_fu_428_p2))) or ((ap_const_lv1_1 = ap_CS_fsm_state16) and not((ap_const_lv1_0 = exitcond_fu_572_p2)) and not((ap_const_lv1_0 = tmp_s_fu_619_p2))))) then 
            bram_WEN_A <= ap_const_lv4_F;
        else 
            bram_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    exitcond1_fu_544_p2 <= "1" when (j_1_reg_251 = ap_const_lv3_4) else "0";
    exitcond2_fu_481_p2 <= "1" when (i_1_reg_240 = ap_const_lv6_20) else "0";
    exitcond3_fu_389_p2 <= "1" when (k_reg_217 = ap_const_lv5_10) else "0";
    exitcond4_fu_357_p2 <= "1" when (j_reg_205 = ap_const_lv5_10) else "0";
    exitcond5_fu_310_p2 <= "1" when (i_reg_194 = ap_const_lv6_20) else "0";
    exitcond_fu_572_p2 <= "1" when (k_1_reg_263 = ap_const_lv5_10) else "0";
    grp_fu_300_p4 <= grp_fu_294_p2(31 downto 8);
    i_2_fu_316_p2 <= std_logic_vector(unsigned(i_reg_194) + unsigned(ap_const_lv6_1));
    i_3_fu_487_p2 <= std_logic_vector(unsigned(i_1_reg_240) + unsigned(ap_const_lv6_1));
    j_2_fu_363_p2 <= std_logic_vector(unsigned(j_reg_205) + unsigned(ap_const_lv5_1));
    j_3_fu_550_p2 <= std_logic_vector(unsigned(j_1_reg_251) + unsigned(ap_const_lv3_1));
    k_2_fu_395_p2 <= std_logic_vector(unsigned(k_reg_217) + unsigned(ap_const_lv5_1));
    k_3_fu_578_p2 <= std_logic_vector(unsigned(k_1_reg_263) + unsigned(ap_const_lv5_1));
    k_cast1_fu_385_p1 <= std_logic_vector(resize(unsigned(k_reg_217),9));

    sigmoid_lut_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16, tmp_11_cast_fu_440_p1, tmp_19_cast_fu_631_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
            sigmoid_lut_address0 <= tmp_19_cast_fu_631_p1(13 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            sigmoid_lut_address0 <= tmp_11_cast_fu_440_p1(13 - 1 downto 0);
        else 
            sigmoid_lut_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    sigmoid_lut_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state4)) or ((ap_const_lv1_1 = ap_CS_fsm_state16)))) then 
            sigmoid_lut_ce0 <= ap_const_logic_1;
        else 
            sigmoid_lut_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sigmoid_lut_load_1_c_fu_667_p1 <= std_logic_vector(resize(unsigned(sigmoid_lut_q0),32));
    sigmoid_lut_load_cas_fu_472_p1 <= std_logic_vector(resize(unsigned(sigmoid_lut_q0),32));
    sum1_cast_fu_406_p1 <= std_logic_vector(resize(unsigned(sum1_fu_401_p2),32));
    sum1_fu_401_p2 <= std_logic_vector(unsigned(tmp_reg_688) + unsigned(k_cast1_fu_385_p1));
    sum2_fu_344_p3 <= (ap_const_lv2_2 & tmp_11_fu_338_p2);
    sum3_cast_fu_458_p1 <= std_logic_vector(resize(unsigned(sum3_reg_729),32));
    sum3_fu_419_p2 <= std_logic_vector(unsigned(tmp1_fu_411_p3) + unsigned(tmp_4_cast_reg_711));
        sum4_cast1_fu_649_p1 <= std_logic_vector(resize(signed(sum4_reg_807),10));

    sum4_cast_fu_652_p1 <= std_logic_vector(resize(unsigned(sum4_cast1_fu_649_p1),32));
    sum4_fu_610_p2 <= std_logic_vector(unsigned(tmp4_fu_602_p3) + unsigned(tmp_6_cast_cast_reg_789));
    sum5_cast_fu_352_p1 <= std_logic_vector(resize(unsigned(sum2_fu_344_p3),32));
    sum5_fu_527_p3 <= (ap_const_lv3_4 & tmp_15_fu_521_p2);
        sum6_cast1_fu_535_p1 <= std_logic_vector(resize(signed(sum5_fu_527_p3),11));

    sum6_cast_fu_539_p1 <= std_logic_vector(resize(unsigned(sum6_cast1_fu_535_p1),32));
    sum7_cast_fu_477_p1 <= std_logic_vector(resize(unsigned(sum7_reg_743),32));
    sum7_fu_453_p2 <= std_logic_vector(unsigned(tmp2_fu_445_p3) + unsigned(tmp_cast_reg_693));
        sum8_cast1_fu_672_p1 <= std_logic_vector(resize(signed(sum8_reg_821),11));

    sum8_cast_fu_675_p1 <= std_logic_vector(resize(unsigned(sum8_cast1_fu_672_p1),32));
    sum8_fu_644_p2 <= std_logic_vector(unsigned(tmp5_fu_636_p3) + unsigned(tmp_2_cast_cast_reg_771));
    sum9_cast_fu_597_p1 <= std_logic_vector(resize(unsigned(sum9_fu_592_p2),32));
    sum9_fu_592_p2 <= std_logic_vector(unsigned(tmp3_fu_584_p3) + unsigned(tmp_1_cast_reg_766));
    sum_2_fu_466_p2 <= std_logic_vector(signed(tmp_5_cast_fu_462_p1) + signed(sum_reg_228));
    sum_3_fu_661_p2 <= std_logic_vector(signed(tmp_18_cast_fu_657_p1) + signed(sum_1_reg_274));
    tmp1_fu_411_p3 <= (ap_const_lv5_10 & k_reg_217);
    tmp2_fu_445_p3 <= (ap_const_lv6_20 & j_reg_205);
    tmp3_fu_584_p3 <= (ap_const_lv6_20 & k_1_reg_263);
    tmp4_fu_602_p3 <= (ap_const_lv4_8 & k_1_reg_263);
    tmp5_fu_636_p3 <= (ap_const_lv7_40 & j_1_reg_251);
    tmp_11_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_434_p2),32));
    tmp_11_fu_338_p2 <= (tmp_fu_326_p3 or ap_const_lv9_F);
    tmp_13_fu_625_p2 <= std_logic_vector(unsigned(tmp_19_fu_615_p1) + unsigned(ap_const_lv15_1000));
    tmp_14_fu_493_p1 <= i_1_reg_240(5 - 1 downto 0);
    tmp_15_fu_521_p2 <= (tmp_2_fu_509_p3 or ap_const_lv7_3);
    tmp_16_fu_369_p1 <= j_reg_205(4 - 1 downto 0);
    tmp_17_fu_556_p1 <= j_1_reg_251(2 - 1 downto 0);
        tmp_18_cast_fu_657_p1 <= std_logic_vector(resize(signed(grp_fu_300_p4),28));

    tmp_18_fu_424_p1 <= sum_reg_228(15 - 1 downto 0);
    tmp_19_cast_fu_631_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_625_p2),32));
    tmp_19_fu_615_p1 <= sum_1_reg_274(15 - 1 downto 0);
    tmp_1_cast_fu_505_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_497_p3),11));
    tmp_1_fu_497_p3 <= (tmp_14_fu_493_p1 & ap_const_lv4_0);
    tmp_2_cast_cast_fu_517_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_509_p3),10));
    tmp_2_fu_509_p3 <= (tmp_14_fu_493_p1 & ap_const_lv2_0);
    tmp_4_cast_fu_381_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_373_p3),10));
    tmp_4_fu_373_p3 <= (tmp_16_fu_369_p1 & ap_const_lv4_0);
        tmp_5_cast_fu_462_p1 <= std_logic_vector(resize(signed(grp_fu_300_p4),28));

    tmp_6_cast_cast_fu_568_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_560_p3),9));
    tmp_6_fu_560_p3 <= (tmp_17_fu_556_p1 & ap_const_lv4_0);
    tmp_7_fu_428_p2 <= "1" when (j_reg_205 = ap_const_lv5_F) else "0";
    tmp_8_fu_322_p1 <= i_reg_194(5 - 1 downto 0);
    tmp_9_fu_434_p2 <= std_logic_vector(unsigned(tmp_18_fu_424_p1) + unsigned(ap_const_lv15_1000));
    tmp_cast_fu_334_p1 <= std_logic_vector(resize(unsigned(tmp_fu_326_p3),11));
    tmp_fu_326_p3 <= (tmp_8_fu_322_p1 & ap_const_lv4_0);
    tmp_s_fu_619_p2 <= "1" when (j_1_reg_251 = ap_const_lv3_3) else "0";
end behav;
